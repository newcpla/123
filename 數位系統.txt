`timescale 1ns/1ps 


module CCC1 (clk,rst,out,cin);
input clk,rst;
output reg[6:0]out;
output reg cin;

 always @(posedge clk or posedge rst) begin
 if (rst)begin
 out<=6'd0;
 end
   else if (out==6'd59)begin
   out<=6'd0;
   cin<=1;
       end
     else begin
     out<=out+6'd1;
      cin<=0;
     end
 end
 
endmodule

module CCC2(clk,rst,out,cin);
input clk,rst;
output reg[6:0]out;
output reg cin;

 always @(posedge clk or posedge rst) begin
 if (rst)begin
 out<=6'd0;
 end
   else if (out==6'd23)begin
   out<=6'd0;
   cin<=1;
   end
     else begin
     out<=out+6'd1;
      cin<=0;
     end
 end
 
endmodule



module BCD8bit (clk,s,min,h,rst,Lock,i1,i2,i3,month,date,temp);

input clk,rst;
output [6:0]s,min,h;
output reg Lock;
wire c1,c2,c3;
input [6:0]i1,i2,i3;
output reg[4:0]month,date,temp;


CCC1 C1(clk,rst,s,c1);
CCC1 C2(c1,rst,min,c2);
CCC2 C3(c2,rst,h,c3);


always @(posedge clk or posedge rst)begin
  if(rst)begin
  Lock<=0;
  month<=12;
  date<=22;
  temp<=10;

  end
  else if(s==i1&&min==i2&&h==i3)begin
  Lock<=1;
  end
    else begin
    Lock<=0;
    end
  
  if(c3==1)begin
  date=23;
  temp=14;
  end
end


endmodule